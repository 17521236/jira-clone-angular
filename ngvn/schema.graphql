# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PermissionDto {
  name: String!
  score: Int!
  type: PermissionType!
  teams: [String!]
  projects: [String!]
  projectIssues: [String!]
}

enum PermissionType {
  System
  Team
  Project
  ProjectIssue
}

type TokenResultDto {
  token: String!
  expiry: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  fullName: String!
  avatarUrl: String
}

type UserInformationDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  fullName: String!
  avatarUrl: String
  permissions: [PermissionDto!]!
}

type ProjectIssueTagStyle {
  color: String!
  backgroundColor: String!
}

type ProjectIssueTagDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  text: String!
  styles: ProjectIssueTagStyle!
  description: String
}

type ProjectIssueDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  name: String!
  title: String!
  summary: String!
  type: ProjectIssueType!
  status: ProjectIssueStatus!
  priority: ProjectIssuePriority!
  tags: [ProjectIssueTagDto]!
  main: UserDto!
}

enum ProjectIssueType {
  Task
  Story
  Bug
}

enum ProjectIssueStatus {
  Backlog
  Selected
  InProgress
  Done
}

enum ProjectIssuePriority {
  Lowest
  Low
  Medium
  High
  Highest
}

type ProjectIssueDetailDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  name: String!
  title: String!
  summary: String!
  type: ProjectIssueType!
  status: ProjectIssueStatus!
  priority: ProjectIssuePriority!
  tags: [ProjectIssueTagDto]!
  main: UserDto!
  outputHtml: String!
  timelines: [TimelineDto]!
  reporter: UserDto!
  assignee: UserDto
  participants: [UserDto]!
}

union TimelineDto = TimelineAssignDto | TimelineCommentDto | TimelineTagDto | TimelineMentionDto

type TimelineAssignDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  type: ProjectTimelineType!
  actor: UserDto!
  assignee: UserDto!
}

enum ProjectTimelineType {
  Comment
  Assign
  Mention
  Tag
}

type TimelineCommentDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  type: ProjectTimelineType!
  actor: UserDto!
  outputHtml: String!
}

type TimelineTagDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  type: ProjectTimelineType!
  actor: UserDto!
  tags: [ProjectIssueTagDto!]!
}

type TimelineMentionDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  type: ProjectTimelineType!
  actor: UserDto!
  issues: [ProjectIssueDto!]!
}

type TeamDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  title: String!
  description: String
  members: [UserDto!]!
}

type ProjectInformationDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  name: String!
  slug: String!
  description: String
  category: ProjectCategory!
  users: [UserDto!]!
  teams: [TeamDto!]!
}

enum ProjectCategory {
  Software
}

type ProjectLaneDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  title: String!
  issues: [ProjectIssueDto]!
}

type ProjectDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  name: String!
  slug: String!
  description: String
  category: ProjectCategory!
  users: [UserDto!]!
  teams: [TeamDto!]!
  lanes: [ProjectLaneDto]!
}

type Query {
  me: UserInformationDto!
  findProjectBySlug(slug: String!): ProjectDto!
  findProjectsByUserId(userId: String!): [ProjectInformationDto!]!
  findIssueById(id: String!): ProjectIssueDetailDto!
  refreshToken: TokenResultDto!
}

type Mutation {
  reorderIssueInLane(projectId: String!, laneId: String!, issues: [String!]!): ProjectDto!
  moveIssueBetweenLanes(projectId: String!, targetLaneId: String!, previousLaneId: String!, targetIssues: [String!]!, previousIssues: [String!]!): ProjectDto!
  createIssue(projectId: String!, title: String!, bodyMarkdown: String!, summary: String!, type: ProjectIssueType!, tags: CreateTagParamsDto, priority: ProjectIssuePriority, assigneeId: String): ProjectIssueDto!
  updateMarkdown(markdown: String!, id: String!): ProjectIssueDetailDto!
  register(email: String!, password: String!, fullName: String!): Boolean
  login(email: String!, password: String!): TokenResultDto!
  logout: Boolean
}

input CreateTagParamsDto {
  text: String!
  description: String
  textColor: String
  backgroundColor: String
}
