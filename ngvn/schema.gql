# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PermissionDto {
  name: String!
  score: Int!
  type: PermissionType!
  teams: [String!]
  projects: [String!]
  projectIssues: [String!]
}

enum PermissionType {
  System
  Team
  Project
  ProjectIssue
}

type TokenResultDto {
  token: String!
  expiry: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  fullName: String!
  avatarUrl: String
}

type UserInformationDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  fullName: String!
  avatarUrl: String
  permissions: [PermissionDto!]!
}

type TeamDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  title: String!
  description: String
  members: [UserDto!]!
}

type ProjectIssueTagStyle {
  color: String!
  backgroundColor: String!
}

type ProjectIssueTagDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  text: String!
  styles: ProjectIssueTagStyle!
  description: String
}

type ProjectIssueDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  title: String!
  outputHtml: String!
  summary: String!
  type: ProjectIssueType!
  status: ProjectIssueStatus!
  priority: ProjectIssuePriority!
  tags: [ProjectIssueTagDto]!
  participants: [UserDto!]!
}

enum ProjectIssueType {
  Task
  Story
  Bug
}

enum ProjectIssueStatus {
  Backlog
  Selected
  InProgress
  Done
}

enum ProjectIssuePriority {
  Lowest
  Low
  Medium
  High
  Highest
}

type ProjectDto {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID
  isActive: Boolean!
  name: String!
  slug: String!
  description: String
  category: ProjectCategory!
  users: [UserDto!]!
  issues: [ProjectIssueDto!]!
  teams: [TeamDto!]!
}

enum ProjectCategory {
  Software
}

type Query {
  me: UserInformationDto!
  findBySlug(slug: String!): ProjectDto!
  refreshToken: TokenResultDto!
}

type Mutation {
  register(email: String!, password: String!, firstName: String!, lastName: String!): Boolean
  login(email: String!, password: String!): TokenResultDto!
  logout: Boolean
}
